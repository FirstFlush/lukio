#!/bin/bash
# A script to mount or unmount a LUKS volume using zuluCrypt-cli, cryptsetup, or udisksctl

#set -euo pipefail

# Constants for option states
readonly OPT_NONE=0
readonly OPT_M=1
readonly OPT_U=2
readonly OPT_BOTH=3

m_flag=0
u_flag=0
tool=""
filepath=""
opt_status=$?

usage() {
    cat <<EOF

lukio (L)inux (U)nified (K)ey IO
https://github.com/FirstFlush/lukio
A simple tool for mounting and unmounting LUKS volumes using various backends (zuluCrypt, cryptsetup, udisksctl).

Usage: [-m | -u] [-c | -z | -d] <file path>
  -m            : Mount volume
  -u            : Unmount volume
  -c            : Use cryptsetup
  -z            : Use zuluCrypt
  -d            : Use udisksctl
  -h, --help    : Show this help message and exit
  <file path>   : Path to the LUKS volume

Examples:
  $(basename "$0") -m -c /dev/sdXn  # Mount using cryptsetup
  $(basename "$0") -u -z /dev/sdXn  # Unmount using zuluCrypt

EOF
    exit 1
}

validate_options() {
    local m_flag="$1"
    local u_flag="$2"

    if [[ $m_flag -eq 1 && $u_flag -eq 1 ]]; then
        echo "Error: Both -m and -u options cannot be set simultaneously." >&2
        opt_status=$OPT_BOTH
    elif [[ $m_flag -eq 1 ]]; then
        opt_status=$OPT_M
    elif [[ $u_flag -eq 1 ]]; then
        opt_status=$OPT_U
    else
        echo "Error: Neither -m nor -u option set." >&2
        opt_status=$OPT_NONE
    fi
}

# Function to check if the selected encryption tool is installed
check_prerequisites() {
    case "$tool" in
        cryptsetup)
            if ! command -v cryptsetup &>/dev/null; then
                echo "Error: cryptsetup not found. Please install it first." >&2
                exit 1
            fi
            ;;
        zuluCrypt)
            if ! command -v zuluCrypt-cli &>/dev/null; then
                echo "Error: zuluCrypt-cli not found. Please install it first." >&2
                exit 1
            fi
            # if [[ $? -eq 0]]; then
            #     echo "Error: zuluCrypt-cli not found. Please install it first." >&2
            #     exit 1
            # fi
            ;;
        udisksctl)
            if ! udisksctl --help &>/dev/null; then
                echo "Error: udisksctl not found. Please install it first." >&2
                exit 1
            fi
            ;;
        *)
            echo "Error: No valid tool selected." >&2
            exit 1
            ;;
    esac
}

parse_options() {
    for arg in "$@"; do
        if [[ "$arg" == "--help" ]]; then
            usage
        fi
    done

    while getopts ":muczdh" opt; do
        case $opt in
            m) m_flag=1 ;;
            u) u_flag=1 ;;
            c) tool="cryptsetup" ;;
            z) tool="zuluCrypt" ;;
            d) tool="udisksctl" ;;
            h) usage ;;
            \?) echo "Error: Invalid option -$OPTARG" >&2; usage ;;
            :) echo "Error: Option -$OPTARG requires an argument." >&2; usage ;;
        esac
    done

    shift $((OPTIND - 1))

    if [[ -z "${1-}" ]]; then
        echo "Error: No file path provided." >&2
        usage
    fi

    if [[ -z "$tool" ]]; then
        echo "Error: You must specify a tool with -c, -z, or -d." >&2
        usage
    fi

    filepath="$1"

    validate_options "$m_flag" "$u_flag"

    return $opt_status
}

# Function to mount the volume using the selected tool
mount_volume() {
    local path="$1"

    case "$tool" in
        cryptsetup)
            sudo cryptsetup open "$path" "$(basename "$path")"
            if [[ $? -eq 0 ]]; then
                echo "Mounted $path using cryptsetup."
            else
                echo "Error: Failed to mount $path using cryptsetup." >&2
                exit 1
            fi
            ;;
        zuluCrypt)
            sudo zuluCrypt-cli -o -d "$path" -m "$(basename "$path")"
            if [[ $? -eq 0 ]]; then
                cd "/run/media/private/$USER/$(basename "$path")"
                echo "Mounted $path using zuluCrypt."
            else
                echo "Error: Failed to mount $path using zuluCrypt." >&2
                exit 1
            fi
            ;;
        udisksctl)
            sudo udisksctl unlock -b "$path"
            if [[ $? -eq 0 ]]; then
                echo "Mounted $path using udisksctl."
            else
                echo "Error: Failed to mount $path using udisksctl." >&2
                exit 1
            fi
            ;;
        *)
            echo "Error: Unsupported tool selected." >&2
            exit 1
            ;;
    esac
}

# Function to unmount the volume using the selected tool
unmount_volume() {
    local path="$1"

    case "$tool" in
        cryptsetup)
            sudo cryptsetup close "$(basename "$path")"
            if [[ $? -eq 0 ]]; then
                echo "Unmounted $path using cryptsetup."
            else
                echo "Error: Failed to unmount $path using cryptsetup." >&2
                exit 1
            fi
            ;;
        zuluCrypt)
            sudo zuluCrypt-cli -q -d "$path" -m "$(basename "$path")"
            if [[ $? -eq 0 ]]; then
                echo "Unmounted $path using zuluCrypt."
            else
                echo "Error: Failed to unmount $path using zuluCrypt." >&2
                exit 1
            fi
            ;;
        udisksctl)
            sudo udisksctl lock -b "$path"
            if [[ $? -eq 0 ]]; then
                echo "Unmounted $path using udisksctl."
            else
                echo "Error: Failed to unmount $path using udisksctl." >&2
                exit 1
            fi
            ;;
        *)
            echo "Error: Unsupported tool selected." >&2
            exit 1
            ;;
    esac
}

main() {
    parse_options "$@"
    check_prerequisites
    case $opt_status in
        $OPT_M) mount_volume "$filepath" ;;
        $OPT_U) unmount_volume "$filepath" ;;
        $OPT_BOTH)
            echo "Cannot proceed: both -m and -u were set." >&2
            exit 1
            ;;
        $OPT_NONE)
            echo "Cannot proceed: neither -m nor -u were set." >&2
            exit 1
            ;;
        *)
            echo "Unknown error." >&2
            exit 1
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    main "$@"
fi

